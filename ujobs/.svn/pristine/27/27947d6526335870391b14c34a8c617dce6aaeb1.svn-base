#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
Created on 2014-8-21

@author: wx
'''
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from utils.decorator import render_to
from django.views.decorators.csrf import csrf_exempt
import logging
import urllib, urllib2
import json
from releaseinfo import SNAIL_SHIELD_URL
from settings import LOGIN_URL

logger = logging.getLogger("logger")

code_dict = {
201006:    '帐号未提供',
202019:    '动态密码未提供',
201001:    '账户不存在',
201004:    '账户已经被锁定',
201005:    '账户状态异常',
202001:    '未绑定',
202008:    '令牌已经过期',
202004:    '验证出错',
202007:    '令牌需要校验',
202006:    '密码已经过期',
}

@render_to("valid.html")
@csrf_exempt
def valid(request):
    '''
    @author: wx
    @param request: 请求参数
    @note: 接收蜗牛通行证和动态密码并完成验证跳转功能，登录成功进入首页，登录失败不跳转
    @return: 登录数据
    '''
    guid = request.GET.get('VerifyId')
    if not guid:
        return HttpResponseRedirect(LOGIN_URL)
    
    if request.method == "POST":
#        redirect_to = request.REQUEST.get("next", reverse('login'))
        guid = request.POST.get('VerifyId')
        redirect_to = '/overview/?VerifyId=%s'%guid
    
        account_name = request.POST.get('account_name')
        valid_code = request.POST.get('valid_code')

        logger.debug("[account valid] %s valid ..."%(account_name))
        if account_name and valid_code:
            data = {'passport':account_name,'dynamicPassword':valid_code}
            req = urllib2.Request(SNAIL_SHIELD_URL)
            req.add_header('H_APPID', 'operations_user')
            req.add_header('H_PWD', 'QdoP^76%')
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            params = urllib.urlencode(data)
            
            response = urllib2.urlopen(req, params)
            jsonText = response.read()
            json_dict = json.loads(jsonText)
            state = json_dict.get('STATE')
            if state == '0':
                return HttpResponseRedirect(redirect_to)
            else:
                code = json_dict.get('CODE')
                error_msg = code_dict.get(code,'')
    return locals()

from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^$', valid, name='valid'),
    url(r'^valid/$', valid, name='valid'),
)
