# -- encoding=utf-8 --
import os, sys
sys.path.insert(0, os.path.abspath(os.curdir))

from utils.decorator import render_to, login_required
from django.shortcuts import render_to_response
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json
import datetime, time
from utils.ctranslate import LazyEncoder
from django.db.transaction import commit_on_success
from utils.db_conn import DB
from config import dashboard
from utils.common import get_product_list_by_user
from releaseinfo import SPECIAL_USERS

@login_required
@csrf_exempt
@render_to('monitor_query/screen_setting.html')
def screen_setting_index(request):
    cnname = request.user.first_name
    if request.user.username in SPECIAL_USERS:
        cnname = u'张延礼'
    p_list = get_product_list_by_user(cnname)
    return locals()

@login_required
@csrf_exempt
def screen_setting_list(request):
    user = request.user
    screen_name = request.GET.get('screen_name','')
    product_name = request.GET.get('product_name','')
    
    iDisplayLength = int(request.GET.get('iDisplayLength',10))
    iDisplayStart = int(request.GET.get('iDisplayStart',0))
    sEcho = int(request.GET.get('sEcho',1))
#    sSearch = request.GET.get('sSearch', None)
    iSortCol_0 = int(request.GET.get('iSortCol_0',0))
    sSortDir_0 = request.GET.get('sSortDir_0')
    order_list = [None, 'name', 'product_name', None, None, None]
    order_item = order_list[iSortCol_0]
    
    dashboard_db_conn = DB(
        dashboard.DASHBOARD_DB_HOST,
        dashboard.DASHBOARD_DB_PORT,
        dashboard.DASHBOARD_DB_USER,
        dashboard.DASHBOARD_DB_PASSWD,
        dashboard.DASHBOARD_DB_NAME)
    
    sql_total = '''
                select count(*) as total
                from dashboard_screen
                '''

    sql_query = '''
        select id, name, product_name
        from dashboard_screen
        '''
    
    #product_name匹配查询
    if product_name:
        sql_total += " where product_name = \'%s\'"%product_name
        sql_query += " where product_name = \'%s\'"%product_name
    
    #screen_name模糊查询
    if screen_name:
        if product_name:
            sql_total += " and name like \'%%%s%%\'"%screen_name
            sql_query += " and name like \'%%%s%%\'"%screen_name
        else:
            sql_total += " where name like \'%%%s%%\'"%screen_name
            sql_query += " where name like \'%%%s%%\'"%screen_name
    
    #排序
    if order_item:
        if sSortDir_0 == "desc":
            sql_query += ' order by `%s` desc, `id` desc'%order_item
        else:
            sql_query += ' order by `%s`, `id` desc'%order_item
    else:
        sql_query += ' order by `id` desc'
    
    
    result_total = dashboard_db_conn.query_all(sql_total)
    total = result_total[0].get('total')
    
    sql_query += ' limit %s, %s'%(iDisplayStart, iDisplayLength)
    result_query = dashboard_db_conn.query_all(sql_query)

    object_list = result_query
    
    sdicts = {}
    sdicts["sEcho"] = sEcho
    sdicts["iTotalRecords"] = total
    sdicts["iTotalDisplayRecords"] = total
    sdicts["aaData"] = []

    for obj in object_list:
        #封装数组，按照列数填入对应的值
        check_html = u"<input type='checkbox' value='%s' class='screen-it'/>" % obj.get('id')
        change_html = '<a href="/monitor_query/screen/%s/" target="_blank">%s</a>' % (obj.get('id'), obj.get('name'))
        operation = '''
                <span class="edit-screen pointer" data-toggle="modal" data-target="#edit_screen">编辑</span>&nbsp;&nbsp;
                <!--<span class="pointer" data-toggle="modal" data-target="#clone_screen">克隆</span>&nbsp;&nbsp;-->
                <span class="add-graph pointer">+graph</span>&nbsp;&nbsp;
                <span class="delete-screen pointer">删除</span>&nbsp;&nbsp;
                '''

        data = [check_html, change_html, obj.get('product_name'), '', '', operation]
        sdicts["aaData"].append(data)
    return HttpResponse(json.dumps(sdicts, cls=LazyEncoder))

@login_required
@csrf_exempt
def screen_add(request):
    sdict = {}
    if request.method == 'GET':
        stype = 1
        cnname = request.user.first_name
        if request.user.username in SPECIAL_USERS:
            cnname = u'张延礼'
        p_list = get_product_list_by_user(cnname)
        
        template_file = "monitor_query/step.html"
        html = render_to_string(template_file, locals())
        sdict['html'] = html
        return HttpResponse(json.dumps(sdict, cls=LazyEncoder))
    else:
        try:
            pid = request.POST.get("pid", '1')
            screen_name = request.POST.get("screen_name",'')
            product_name = request.POST.get("product_name",'')
            
            dashboard_db_conn = DB(
                dashboard.DASHBOARD_DB_HOST,
                dashboard.DASHBOARD_DB_PORT,
                dashboard.DASHBOARD_DB_USER,
                dashboard.DASHBOARD_DB_PASSWD,
                dashboard.DASHBOARD_DB_NAME)
        
            #screen
            sql_screen = '''insert into dashboard_screen (pid, name, product_name) values(\'%s\', \'%s\', \'%s\')'''%(pid, screen_name, product_name)
            cursor = dashboard_db_conn.execute(sql_screen)
            screen_id = cursor.lastrowid
            dashboard_db_conn.commit()
            cursor.close()
            
            sdict['ret'] = 1
            sdict['screen_id'] = screen_id
        except Exception,e:
            sdict['ret'] = 0
            print e
        
        template_file = "monitor_query/step2.html"
        html = render_to_string(template_file, locals())
        sdict['html'] = html
        return HttpResponse(json.dumps(sdict, cls=LazyEncoder))

@login_required
@csrf_exempt
def graph_add(request):     
    sdict = {}
    try:
        screen_id = request.POST.get("screen_id")
        title = request.POST.get("title")
        
        hosts = request.POST.getlist("hosts[]", [])
        counters = request.POST.getlist("counters[]", [])
    
        timespan = request.POST.get("timespan", 3600)
        graph_type = request.POST.get("graph_type", 'h')
        method = request.POST.get("is_sum", '').upper()
        position = request.POST.get("position", 0)
        
        dashboard_db_conn = DB(
            dashboard.DASHBOARD_DB_HOST,
            dashboard.DASHBOARD_DB_PORT,
            dashboard.DASHBOARD_DB_USER,
            dashboard.DASHBOARD_DB_PASSWD,
            dashboard.DASHBOARD_DB_NAME)
        
        #graph
        sql_graph = '''insert into dashboard_graph (title, hosts, counters, screen_id,
                timespan, graph_type, method, position)
                values(\'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\')'''%\
                (title, dashboard.ENDPOINT_DELIMITER.join(hosts) or "", dashboard.ENDPOINT_DELIMITER.join(counters) or "", screen_id,\
                timespan, graph_type, method, position)

        cursor = dashboard_db_conn.execute(sql_graph)
        id_ = cursor.lastrowid
        dashboard_db_conn.execute('''update dashboard_graph set position=%s where id=%s''', (id_, id_))
        dashboard_db_conn.commit()
        cursor.close()
        
        sdict['ret'] = 1
        sdict['msg'] = u'创建屏幕成功 :)'
    except Exception,e:
        sdict['ret'] = 0
        sdict['msg'] = u'创建屏幕失败 :('
        print e
        
    return HttpResponse(json.dumps(sdict, cls=LazyEncoder))

@login_required
@csrf_exempt
def screen_get_title(request):
    screen_id = request.POST.get('screen_id')
    
    dashboard_db_conn = DB(
        dashboard.DASHBOARD_DB_HOST,
        dashboard.DASHBOARD_DB_PORT,
        dashboard.DASHBOARD_DB_USER,
        dashboard.DASHBOARD_DB_PASSWD,
        dashboard.DASHBOARD_DB_NAME)
    
    sql = '''select g.id, g.title
            from dashboard.dashboard_graph g, dashboard.dashboard_screen s
            where g.screen_id = s.id and s.id = %s '''%screen_id
    rows = dashboard_db_conn.query_all(sql)
    return HttpResponse(json.dumps(rows, cls=LazyEncoder))

@login_required
@csrf_exempt
def screen_edit(request):
    #GET编辑screen
    sdict = {}
    if request.method == 'GET':
        graph_id = request.GET.get('graph_id')
        stype = 2
        
        dashboard_db_conn = DB(
            dashboard.DASHBOARD_DB_HOST,
            dashboard.DASHBOARD_DB_PORT,
            dashboard.DASHBOARD_DB_USER,
            dashboard.DASHBOARD_DB_PASSWD,
            dashboard.DASHBOARD_DB_NAME)
    
        sql = '''select s.name, s.product_name, g.title, g.hosts, g.counters, g.timespan, g.graph_type, g.method
                from dashboard.dashboard_graph g, dashboard.dashboard_screen s
                where g.screen_id = s.id and g.id = %s'''%graph_id
    
        row = dashboard_db_conn.query_one(sql)
    
        title = row.get('title','')
        screen_name = row.get('name','')
        product_name = row.get('product_name','')
        
        hosts = row.get('hosts')
        hosts = hosts.split(dashboard.ENDPOINT_DELIMITER) or []
        counters = row.get('counters')
        counters = counters.split(dashboard.ENDPOINT_DELIMITER) or []
        timespan = '%s'%row.get('timespan')
        graph_type = row.get('graph_type')
        method = row.get('method')
        
        template_file = "monitor_query/step.html"
        template_file2 = "monitor_query/step2.html"
        template_file3 = "monitor_query/step3.html"
        html = render_to_string(template_file, locals())
        html2 = render_to_string(template_file2, locals())
        html3 = render_to_string(template_file3, locals())
        sdict['ret'] = 1
        sdict['html'] = html
        sdict['html2'] = html2
        sdict['html3'] = html3
        return HttpResponse(json.dumps(sdict, cls=LazyEncoder))
    else:
        try:
            screen_id = request.POST.get("screen_id")
            screen_name = request.POST.get("screen_name",'')
            product_name = request.POST.get("product_name",'')
            
            graph_id = request.POST.get("graph_id")
            title = request.POST.get("title")
            hosts = request.POST.getlist("hosts[]", [])
            counters = request.POST.getlist("counters[]", [])
            timespan = request.POST.get("timespan", 3600)
            graph_type = request.POST.get("graph_type", 'h')
            method = request.POST.get("is_sum", '').upper()
            
            dashboard_db_conn = DB(
                dashboard.DASHBOARD_DB_HOST,
                dashboard.DASHBOARD_DB_PORT,
                dashboard.DASHBOARD_DB_USER,
                dashboard.DASHBOARD_DB_PASSWD,
                dashboard.DASHBOARD_DB_NAME)
            
            #screen
            sql_screen = '''update dashboard_screen set `name`=\'%s\' where `id`=%s'''%(screen_name, screen_id)
            cursor = dashboard_db_conn.execute(sql_screen)
            dashboard_db_conn.commit()
            cursor.close()
            
            #graph
            sql_graph = '''update dashboard_graph set `title`=\'%s\', `hosts`=\'%s\', `counters`=\'%s\',
                        `timespan`=\'%s\', `graph_type`=\'%s\', `method`=\'%s\' where `id`=%s
                        '''%(title, dashboard.ENDPOINT_DELIMITER.join(hosts) or "", dashboard.ENDPOINT_DELIMITER.join(counters) or "", \
                        timespan, graph_type, method, graph_id)
            
            cursor = dashboard_db_conn.execute(sql_graph)
            dashboard_db_conn.commit()
            cursor.close()
            
            sdict['ret'] = 1
            sdict['msg'] = u'修改屏幕成功 :)'
        except Exception,e:
            sdict['ret'] = 0
            sdict['msg'] = u'修改屏幕失败 :('
            print e
        return HttpResponse(json.dumps(sdict, cls=LazyEncoder))
    
@login_required
@csrf_exempt
def screen_graph_add(request):
    #GET编辑screen
    sdict = {}
    if request.method == 'GET':
        screen_id = request.GET.get("screen_id")
        stype = 3
        
        dashboard_db_conn = DB(
            dashboard.DASHBOARD_DB_HOST,
            dashboard.DASHBOARD_DB_PORT,
            dashboard.DASHBOARD_DB_USER,
            dashboard.DASHBOARD_DB_PASSWD,
            dashboard.DASHBOARD_DB_NAME)
    
        sql = '''select id, name, product_name
                from dashboard_screen
                where id = %s'''%screen_id
    
        row = dashboard_db_conn.query_one(sql)
    
        screen_name = row.get('name','')
        product_name = row.get('product_name','')
        
        template_file = "monitor_query/step.html"
        template_file2 = "monitor_query/step2.html"
        template_file3 = "monitor_query/step3.html"
        html = render_to_string(template_file, locals())
        html2 = render_to_string(template_file2, locals())
        html3 = render_to_string(template_file3, locals())
        sdict['ret'] = 1
        sdict['html'] = html
        sdict['html2'] = html2
        sdict['html3'] = html3
        return HttpResponse(json.dumps(sdict, cls=LazyEncoder))
    else:
        try:
            screen_id = request.POST.get("screen_id")
            screen_name = request.POST.get("screen_name",'')
            product_name = request.POST.get("product_name",'')
            title = request.POST.get("title",'')
            
            hosts = request.POST.getlist("hosts[]", [])
            counters = request.POST.getlist("counters[]", [])
        
            timespan = request.POST.get("timespan", 3600)
            graph_type = request.POST.get("graph_type", 'h')
            method = request.POST.get("is_sum", '').upper()
            position = request.POST.get("position", 0)
            
            dashboard_db_conn = DB(
                dashboard.DASHBOARD_DB_HOST,
                dashboard.DASHBOARD_DB_PORT,
                dashboard.DASHBOARD_DB_USER,
                dashboard.DASHBOARD_DB_PASSWD,
                dashboard.DASHBOARD_DB_NAME)
            
            #screen
            sql_screen = '''update dashboard_screen set `name`=\'%s\' where `id`=%s'''%(screen_name, screen_id)
            cursor = dashboard_db_conn.execute(sql_screen)
            dashboard_db_conn.commit()
            cursor.close()
            
            #graph
            sql_graph = '''insert into dashboard_graph (title, hosts, counters, screen_id,
                    timespan, graph_type, method, position)
                    values(\'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\')'''%\
                    (title, dashboard.ENDPOINT_DELIMITER.join(hosts) or "", dashboard.ENDPOINT_DELIMITER.join(counters) or "", screen_id,\
                    timespan, graph_type, method, position)
    
            cursor = dashboard_db_conn.execute(sql_graph)
            id_ = cursor.lastrowid
            dashboard_db_conn.execute('''update dashboard_graph set position=%s where id=%s''', (id_, id_))
            dashboard_db_conn.commit()
            cursor.close()
            
            sdict['ret'] = 1
            sdict['msg'] = u'添加graph成功 :)'
        except Exception,e:
            sdict['ret'] = 0
            sdict['msg'] = u'添加graph失败 :('
            print e
        return HttpResponse(json.dumps(sdict, cls=LazyEncoder))

@login_required
@csrf_exempt
def screen_delete(request):
    sdict = {}
    screen_id = request.POST.get("screen_id")
    
    if not screen_id:
        sdict['ret'] = 0
        sdict['msg'] = u'删除屏幕失败 :('
        
    else:
        try:
            dashboard_db_conn = DB(
                dashboard.DASHBOARD_DB_HOST,
                dashboard.DASHBOARD_DB_PORT,
                dashboard.DASHBOARD_DB_USER,
                dashboard.DASHBOARD_DB_PASSWD,
                dashboard.DASHBOARD_DB_NAME)
        
            sql = '''delete from dashboard_screen where id=%s'''%screen_id
            dashboard_db_conn.execute('''delete from dashboard_screen where id=%s'''%screen_id)
            print sql
    #        dashboard_db_conn.execute('''delete from dashboard_graph where screen_id=%s'''%screen_id)
            dashboard_db_conn.commit()
            sdict['ret'] = 1
            sdict['msg'] = u'删除屏幕成功 :)'
        except Exception,e:
            print e
            sdict['ret'] = 0
            sdict['msg'] = u'删除屏幕失败 :('
    return HttpResponse(json.dumps(sdict, cls=LazyEncoder))
    
@login_required
@csrf_exempt
@render_to('monitor_query/screen_show.html')
def screen_show_index(request):
    return locals()

@login_required
@csrf_exempt
@render_to('monitor_query/screen.html')
def dash_screen(request, sid):
    start = request.GET.get("start")
    end = request.GET.get("end")

    dashboard_db_conn = DB(
        dashboard.DASHBOARD_DB_HOST,
        dashboard.DASHBOARD_DB_PORT,
        dashboard.DASHBOARD_DB_USER,
        dashboard.DASHBOARD_DB_PASSWD,
        dashboard.DASHBOARD_DB_NAME)
    
    sql = '''select id, title, hosts, counters, screen_id,timespan, graph_type, method, position 
            from dashboard_graph where screen_id=%s order by position
            '''%(sid,)
    cursor = dashboard_db_conn.execute(sql)
    rows = cursor.fetchall()
    cursor and cursor.close()
    graphs = []
    for row in rows:
        args = list(row)
        args[2] = args[2].split(dashboard.ENDPOINT_DELIMITER) or []
        args[3] = args[3].split(dashboard.ENDPOINT_DELIMITER) or []
        graphs.append(args)
    

    all_graphs = []

#    for graph in graphs:
#        all_graphs.extend(generate_graph_urls(graph, start, end) or [])

    all_graphs = sorted(all_graphs, key=lambda x:x.position)

    return locals()


from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^monitor_query/screen_setting/$', screen_setting_index, name='screen_setting_index'),
    url(r'^monitor_query/screen_list/$', screen_setting_list, name='screen_setting_list'),
    
    #创建屏幕
    url(r'^monitor_query/screen_add/$', screen_add, name='screen_add'),
    url(r'^monitor_query/graph_add/$', graph_add, name='graph_add'),
    
    #编辑屏幕
    url(r'^monitor_query/screen_get_title/$', screen_get_title, name='screen_get_title'),
    url(r'^monitor_query/screen_edit/$', screen_edit, name='screen_edit'),
    
    #添加graph
    url(r'^monitor_query/screen_graph_add/$', screen_graph_add, name='screen_graph_add'),
    
    #删除屏幕
    url(r'^monitor_query/screen_delete/$', screen_delete, name='screen_delete'),
    
    url(r'^monitor_query/screen_show/$', screen_show_index, name='screen_show_index'),
    url(r'^monitor_query/screen/(\d+)/$', dash_screen, name='dash_screen'),
    
)