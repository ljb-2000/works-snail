# -- encoding=utf-8 --
import os, sys
sys.path.insert(0, os.path.abspath(os.curdir))

from utils.decorator import render_to, login_required
from django.shortcuts import render_to_response
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json
import datetime, time
from utils.ctranslate import LazyEncoder
from django.db.transaction import commit_on_success
from utils.db_conn import DB
from config import portal, graph

@login_required
@csrf_exempt
@render_to('monitor_query/query.html')
def monitor_query_index(request):
    return locals()

@login_required
@csrf_exempt
def monitor_query_endpoint_list(request):
    user = request.user
    is_null = request.GET.get('null',0)
    iptxt = request.GET.get('iptxt','')
    ipstr = request.GET.get('ipstr','')
    
    iDisplayLength = int(request.GET.get('iDisplayLength'))
    iDisplayStart = int(request.GET.get('iDisplayStart'))
    sEcho = int(request.GET.get('sEcho'))
#    sSearch = request.GET.get('sSearch', None)
    iSortCol_0 = int(request.GET.get('iSortCol_0',0))
    sSortDir_0 = request.GET.get('sSortDir_0')
    order_list = [None, 'ip']
    order_item = order_list[iSortCol_0]
    
    if is_null:
        total = 0
        result_query = ()
    else:
        portal_db_conn = DB(
            portal.DB_HOST,
            portal.DB_PORT,
            portal.DB_USER,
            portal.DB_PASS,
            portal.DB_NAME)
        
        sql_total = '''
                    select count(*) as total
                    from falcon_portal.host host, monitor.alarm_agentinfo alarm_agentinfo
                    where host.ip = alarm_agentinfo.endpoint
                    '''
    
        sql_query = '''
            select host.id, host.ip, host.maintain_begin, alarm_agentinfo.product_name, alarm_agentinfo.p_set, alarm_agentinfo.p_module
            from falcon_portal.host host, monitor.alarm_agentinfo alarm_agentinfo
            where host.ip = alarm_agentinfo.endpoint
            '''
        
        #ip匹配查询
        if iptxt:
            ip_list = iptxt.split(',')
            sql_total += " and host.ip in ('%s')"%"','".join(ip_list)
            sql_query += " and host.ip in ('%s')"%"','".join(ip_list)
        
        #ip模糊查询
        if ipstr:
            sql_total += " and host.ip like \'%%%s%%\'"%ipstr
            sql_query += " and host.ip like \'%%%s%%\'"%ipstr
            
        #排序
        if order_item:
            if sSortDir_0 == "desc":
                sql_query += ' order by %s desc'%order_item
            else:
                sql_query += ' order by %s'%order_item
        
        result_total = portal_db_conn.query_all(sql_total)
        total = result_total[0].get('total')
        
        sql_query += ' limit %s, %s'%(iDisplayStart, iDisplayLength)
        result_query = portal_db_conn.query_all(sql_query)

    #第一个参数表示需要分页的对象，可为list、tuple、QuerySet，只要它有count()或者__len__()函数
    #第二个参数为每页显示记录数
#    p = Paginator(rows, iDisplayLength)
#    total = p.count #总数
#    page_range = p.page_range #页数list
#    page = p.page(page_range[iDisplayStart / iDisplayLength])
#    object_list = page.object_list
    
    object_list = result_query
    
    sdicts = {}
    sdicts["sEcho"] = sEcho
    sdicts["iTotalRecords"] = total
    sdicts["iTotalDisplayRecords"] = total
    sdicts["aaData"] = []

    for obj in object_list:
        #封装数组，按照列数填入对应的值
        check_html = u"<input type='checkbox' value='%s' class='check-it'/>" % obj.get('ip')
#        change_html = '<a style="color: blue;" href="javascript:void(0)" onclick="javascript:account_edit(\'%s\',\'%s\');">%s</a>' % (obj.id, obj.name, obj.name)
        data = [check_html, obj.get('ip')]
        sdicts["aaData"].append(data)
    return HttpResponse(json.dumps(sdicts, cls=LazyEncoder))


@login_required
@csrf_exempt
def monitor_query_counter_list(request):
    user = request.user
    endpoints = request.GET.get('endpoints','')
    q = request.GET.get('q','')
    
    iDisplayLength = int(request.GET.get('iDisplayLength'))
    iDisplayStart = int(request.GET.get('iDisplayStart'))
    sEcho = int(request.GET.get('sEcho'))
#    sSearch = request.GET.get('sSearch', None)
    iSortCol_0 = int(request.GET.get('iSortCol_0',0))
    sSortDir_0 = request.GET.get('sSortDir_0')
    order_list = [None, 'counter']
    order_item = order_list[iSortCol_0]
    
    if not endpoints:
        total = 0
        object_list = ()
    else:
        endpoint_list = endpoints.split(',')
        
        graph_db_conn = DB(
            graph.GRAPH_DB_HOST,
            graph.GRAPH_DB_PORT,
            graph.GRAPH_DB_USER,
            graph.GRAPH_DB_PASSWD,
            graph.GRAPH_DB_NAME)
        
        sql_total = '''select count(endpoint_counter.id) as total from endpoint, endpoint_counter
                where endpoint_counter.endpoint_id=endpoint.id and endpoint.endpoint in ('%s') '''%"','".join(endpoint_list)
                
        sql_query = '''select endpoint_counter.id, endpoint_counter.counter from endpoint, endpoint_counter
                where endpoint_counter.endpoint_id=endpoint.id and endpoint.endpoint in ('%s') '''%"','".join(endpoint_list)
        
        if q:
            sql_total += "and endpoint_counter.counter like \'%%%s%%\'"%q
            sql_query += "and endpoint_counter.counter like \'%%%s%%\'"%q
        
        result_total = graph_db_conn.query_all(sql_total)
        total = result_total[0].get('total')
        
        sql_query += ' limit %s, %s'%(iDisplayStart, iDisplayLength)
        result_query = graph_db_conn.query_all(sql_query)
            
        object_list = result_query
    
    sdicts = {}
    sdicts["sEcho"] = sEcho
    sdicts["iTotalRecords"] = total
    sdicts["iTotalDisplayRecords"] = total
    sdicts["aaData"] = []
    
    for obj in object_list:
        #封装数组，按照列数填入对应的值
        check_html = u"<input type='checkbox' value='%s' class='plot-it'/>" % obj.get('id')
#        change_html = '<a style="color: blue;" href="javascript:void(0)" onclick="javascript:account_edit(\'%s\',\'%s\');">%s</a>' % (obj.id, obj.name, obj.name)
        counter = '<a href="javascript:void(0);" onclick="fn_show_chart(\'%s\')">%s</a>'%(obj.get('counter'),obj.get('counter'))
        data = [check_html, counter]
        sdicts["aaData"].append(data)
    return HttpResponse(json.dumps(sdicts, cls=LazyEncoder))

from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^monitor_query/$', monitor_query_index, name='monitor_query_index'),
    url(r'^monitor_query_endpoint_list/$', monitor_query_endpoint_list, name='monitor_query_endpoint_list'),
    url(r'^monitor_query_counter_list/$', monitor_query_counter_list, name='monitor_query_counter_list'),
)