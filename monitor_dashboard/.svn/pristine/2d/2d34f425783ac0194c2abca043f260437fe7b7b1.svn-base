#!/usr/bin/env python
# -*- coding:utf-8 -*-

# --------------------------------
# Author: shenjh@snail.com
# Date: 2015/12/7
# Usage:
# --------------------------------
import json

import requests
import traceback
from apps.plugin.models import ServerPluginSetting
from releaseinfo import PRODUCT_URL,SEND_LOG_URL, PLUGIN_SETTING_KEY_PREFIX
from utils.db_conn import DB
from config import monitor
from utils.redisclient import rc


def get_product_list_by_user(cnname):
    """
        get cn product list of user's cnname.
    """
    p_list = []
    if cnname:
        try:
            resp = requests.post(PRODUCT_URL,data={
                "username":cnname
            }).json()
            p_list=[item['productname'] for item in resp]
        except Exception,e:
            error = traceback.format_exc()
            print error
    return p_list


def get_hosts_of_user(username):
    products = get_product_list_by_user(username)
    if not products:
        return []
    sql = "select endpoint from alarm_agentinfo WHERE product_name in (\'%s\')"%("','".join(products))
    monitor_db_conn = DB(
        monitor.DB_HOST,
        monitor.DB_PORT,
        monitor.DB_USER,
        monitor.DB_PASS,
        monitor.DB_NAME)
    result = monitor_db_conn.query_all(sql)
    return sorted([item['endpoint'] for item in result])

def get_set_by_ip_list(ip_list):
    if not ip_list:
        return []
    sql = """select DISTINCT p_set from alarm_agentinfo WHERE endpoint in (\'%s\')"""%("','".join(ip_list))
    monitor_db_conn = DB(
        monitor.DB_HOST,
        monitor.DB_PORT,
        monitor.DB_USER,
        monitor.DB_PASS,
        monitor.DB_NAME)
    result = monitor_db_conn.query_all(sql)
    data = set()
    for item in result:
        p_set = item['p_set']
        if p_set:
            [data.add(i) for i in p_set.split(',')]
    return list(data)

def send_log(username,action,message,obj_type,remark=""):
    try:
        require_list = ['user','action','message']
        data = {
            "user":username,
            "action":action,
            "message":message,
            "source":"monitor_dashboard",
            "obj_type":obj_type,
            "remark":remark
        }
        for i in require_list:
            if not data[i]:
                raise RuntimeError,"ERROR: {0} IS REQUIRED"
        if data['action'] not in ['login','logout','add','delete','update']:
            raise RuntimeError,"ERROR: invalid action value"
        if data['obj_type'] not in ['plugin','host','user',"userself","screen"]:
            raise RuntimeError,"ERROR: invalid obj_type value"
        requests.post(SEND_LOG_URL,data=data,timeout=5)
    except RuntimeError,e:
        raise e
    except Exception,e:
        print e
        print traceback.format_exc()

def update_plugin_cache_by_ips(ip_list):
    if not ip_list:
        return
    print "start update cache, ips:",ip_list
    settings = ServerPluginSetting.objects.filter(ip__in=ip_list)
    setting_dict = {}
    for setting in settings:
        setting_dict.setdefault(setting.ip,{}).update({setting.key:setting.value})

    for ip,value in setting_dict.iteritems():
        rc.set(PLUGIN_SETTING_KEY_PREFIX+ip,json.dumps(value),ex=60*60)
    print "update cache done."