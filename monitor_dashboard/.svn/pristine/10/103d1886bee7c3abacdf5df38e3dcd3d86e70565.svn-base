# -- encoding=utf-8 --
import os, sys
sys.path.insert(0, os.path.abspath(os.curdir))

from utils.decorator import render_to, login_required
from django.shortcuts import render_to_response
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json
from django.core.paginator import Paginator
import datetime
from utils.ctranslate import LazyEncoder
import time
from utils.db_conn import monitor_event_db_conn
from utils.util import get_unsolved_alarms
from utils.util import get_product_of_host
import traceback

@login_required
@csrf_exempt
@render_to('warning_query/unrecovery.html')
def warning_query_unrecovery_index(request):
    return locals()

@login_required
@csrf_exempt
def warning_query_unrecovery_list(request):
    user = request.user
    iptxt = request.GET.get('iptxt', '')
    null = request.GET.get('null',False)
    iDisplayLength = int(request.GET.get('iDisplayLength'))
    iDisplayStart = int(request.GET.get('iDisplayStart'))
    sEcho = int(request.GET.get('sEcho'))
#    sSearch = request.GET.get('sSearch', None)
    iSortCol_0 = int(request.GET.get('iSortCol_0',0))
    sSortDir_0 = request.GET.get('sSortDir_0')
    order_list = [None, 'endpoint', 'metric', 'r_value', 'timestamp']

    order_item = order_list[iSortCol_0]

    if null:
        alarms = []
    else:
        alarms = get_unsolved_alarms()
        #查询
        if iptxt:
            ip_list = iptxt.split('\n')
            alarms = [alarm for alarm in alarms if alarm['endpoint'] in ip_list ]

    #第一个参数表示需要分页的对象，可为list、tuple、QuerySet，只要它有count()或者__len__()函数
    #第二个参数为每页显示记录数
    p = Paginator(alarms, iDisplayLength)
    total = p.count #总数
    page_range = p.page_range #页数list
    page = p.page(page_range[iDisplayStart / iDisplayLength])
    object_list = page.object_list

    sdicts = {}
    sdicts["sEcho"] = sEcho
    sdicts["iTotalRecords"] = total
    sdicts["iTotalDisplayRecords"] = total
    sdicts["aaData"] = []
    try:
        for obj in object_list:
            #封装数组，按照列数填入对应的值
            info =  get_product_of_host(obj.get('endpoint'))
            check_html = u"<input type='checkbox' value='%s' class='check-it'/>" % obj.get('id')
            monitor_item = " ".join([obj.get('metric'),obj.get('func'),obj.get('operator'),obj.get('rightValue')])
            data = [check_html, obj.get('endpoint'), info.get("p_name"),info.get("p_set"),info.get("p_module"),monitor_item, obj.get('leftValue',""),obj.get("alarm_time","")]
            sdicts["aaData"].append(data)
    except:
        print traceback.format_exc()
        sdicts["aaData"] = []
    return HttpResponse(json.dumps(sdicts, cls=LazyEncoder))

@login_required
@csrf_exempt
@render_to('warning_query/recovery.html')
def warning_query_recovery_index(request):
    return locals()

@login_required
@csrf_exempt
def warning_query_recovery_list(request):
    table_name = "event_%s" % (datetime.datetime.now().strftime("%Y%m"))
    user = request.user
    null = request.GET.get('null',False)
    iptxt = request.GET.get('iptxt', '').strip()

    iDisplayLength = int(request.GET.get('iDisplayLength'))
    iDisplayStart = int(request.GET.get('iDisplayStart'))
    sEcho = int(request.GET.get('sEcho'))
#    sSearch = request.GET.get('sSearch', None)
    iSortCol_0 = int(request.GET.get('iSortCol_0',0))
    sSortDir_0 = request.GET.get('sSortDir_0')
    order_list = [None, 'endpoint', 'product_name', 'p_set', 'p_module', None]
    order_item = order_list[iSortCol_0]

    if null:
        rows = []
        total = 0
    else:
        sql = '''SELECT * FROM %(table_name)s WHERE status="PROBLEM"''' % ({'table_name': table_name})

        #查询
        if iptxt:
            ip_list = iptxt.split('\n')
            sql += " AND endpoint in ('%s')"%"','".join(ip_list)

        #排序
        if order_item:
            if sSortDir_0 == "desc":
                sql += ' order by %s desc'%order_item
            else:
                sql += ' order by %s'%order_item
        else:
            sql += 'order by id desc'

        sql = sql + ' limit %s,%s'%(iDisplayStart,iDisplayLength)
        rows = monitor_event_db_conn.query_all(sql)

        total_query = monitor_event_db_conn.query_all('''SELECT count(*) num FROM %(table_name)s WHERE status="PROBLEM"''' % ({'table_name': table_name}))
        total = total_query[0].get("num",0)

    p = Paginator(rows, iDisplayLength)
    # total = p.count #总数
    page_range = p.page_range #页数list
    # page = p.page(page_range[iDisplayStart / iDisplayLength])
    page = p.page(page_range[0])
    object_list = page.object_list

    sdicts = {}
    sdicts["sEcho"] = sEcho
    sdicts["iTotalRecords"] = total
    sdicts["iTotalDisplayRecords"] = total
    sdicts["aaData"] = []
    try:
        for obj in object_list:
            #封装数组，按照列数填入对应的值
            strategy = json.loads(obj['strategy'])
            event_time = obj.get("eventTime","")
            alarm_time = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(event_time))
            check_html = u"<input type='checkbox' value='%s' class='check-it'/>" % obj.get('id')
            fmt_stategy = " ".join([strategy["metric"],strategy["func"],strategy["operator"],str(strategy["rightValue"])])
            data = [check_html, obj.get('endpoint'), obj.get('product_name'),obj.get("p_set"),obj.get("p_module"),fmt_stategy, obj.get("leftValue"),alarm_time]
            sdicts["aaData"].append(data)
    except:
        print traceback.format_exc()
        sdicts["aaData"] = []
    return HttpResponse(json.dumps(sdicts, cls=LazyEncoder))

from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^warning_query/unrecovery/$', warning_query_unrecovery_index),
    url(r'^warning_query/recovery/$', warning_query_recovery_index),
    url(r'^warning_query/unrecovery/list$', warning_query_unrecovery_list),
    url(r'^warning_query/recovery/list$', warning_query_recovery_list),
)