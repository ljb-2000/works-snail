# -- encoding=utf-8 --
import os, sys
sys.path.insert(0, os.path.abspath(os.curdir))

from utils.decorator import render_to, login_required
from django.shortcuts import render_to_response
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json
import datetime, time
from utils.ctranslate import LazyEncoder
from django.db.transaction import commit_on_success
from utils.db_conn import DB
from config import dashboard
from utils.common import get_product_list_by_user
from releaseinfo import SPECIAL_USERS

@login_required
@csrf_exempt
@render_to('monitor_query/screen_setting.html')
def screen_setting_index(request):
    cnname = request.user.first_name
    if request.user.username in SPECIAL_USERS:
        cnname = u'张延礼'
    p_list = get_product_list_by_user(cnname)
    return locals()

@login_required
@csrf_exempt
def screen_setting_list(request):
    user = request.user
    screen_name = request.GET.get('screen_name','')
    product_name = request.GET.get('product_name','')
    
    iDisplayLength = int(request.GET.get('iDisplayLength',10))
    iDisplayStart = int(request.GET.get('iDisplayStart',0))
    sEcho = int(request.GET.get('sEcho',1))
#    sSearch = request.GET.get('sSearch', None)
    iSortCol_0 = int(request.GET.get('iSortCol_0',0))
    sSortDir_0 = request.GET.get('sSortDir_0')
    order_list = [None, 'name', 'product_name', None, None, None]
    order_item = order_list[iSortCol_0]
    
    dashboard_db_conn = DB(
        dashboard.DASHBOARD_DB_HOST,
        dashboard.DASHBOARD_DB_PORT,
        dashboard.DASHBOARD_DB_USER,
        dashboard.DASHBOARD_DB_PASSWD,
        dashboard.DASHBOARD_DB_NAME)
    
    sql_total = '''
                select count(*) as total
                from dashboard_screen
                '''

    sql_query = '''
        select id, name, product_name
        from dashboard_screen
        '''
    
    #product_name匹配查询
    if product_name:
        sql_total += " where product_name = \'%s\'"%product_name
        sql_query += " where product_name = \'%s\'"%product_name
    
    #screen_name模糊查询
    if screen_name:
        if product_name:
            sql_total += " and name like \'%%%s%%\'"%screen_name
            sql_query += " and name like \'%%%s%%\'"%screen_name
        else:
            sql_total += " where name like \'%%%s%%\'"%screen_name
            sql_query += " where name like \'%%%s%%\'"%screen_name
    
    #排序
    if order_item:
        if sSortDir_0 == "desc":
            sql_query += ' order by %s desc'%order_item
        else:
            sql_query += ' order by %s'%order_item
    
    result_total = dashboard_db_conn.query_all(sql_total)
    total = result_total[0].get('total')
    
    sql_query += ' limit %s, %s'%(iDisplayStart, iDisplayLength)
    result_query = dashboard_db_conn.query_all(sql_query)

    object_list = result_query
    
    sdicts = {}
    sdicts["sEcho"] = sEcho
    sdicts["iTotalRecords"] = total
    sdicts["iTotalDisplayRecords"] = total
    sdicts["aaData"] = []

    for obj in object_list:
        #封装数组，按照列数填入对应的值
        check_html = u"<input type='checkbox' value='%s' class='check-it'/>" % obj.get('id')
        change_html = '<a href="javascript:void(0)" onclick="javascript:alert(\'%s\');">%s</a>' % (obj.get('id'), obj.get('name'))
        operation = '''
                <span class="edit-screen pointer">编辑</span>&nbsp;&nbsp;
                <!--<span class="pointer" data-toggle="modal" data-target="#clone_screen">克隆</span>&nbsp;&nbsp;-->
                <span class="add-graph pointer">+graph</span>&nbsp;&nbsp;
                <span class="pointer">删除</span>&nbsp;&nbsp;
                '''

        data = [check_html, change_html, obj.get('product_name'), '', '', operation]
        sdicts["aaData"].append(data)
    return HttpResponse(json.dumps(sdicts, cls=LazyEncoder))

@login_required
@csrf_exempt
def screen_add(request):
    sdict = {}
    
    try:
        pid = request.POST.get("pid", '1')
        screen_name = request.POST.get("screen_name")
        product_name = request.POST.get("product_name")
        title = request.POST.get("title")
    
        hosts = request.POST.getlist("hosts[]", [])
        counters = request.POST.getlist("counters[]", [])
    
        timespan = request.POST.get("timespan", 3600)
        graph_type = request.POST.get("graph_type", 'h')
        method = request.POST.get("is_sum", '').upper()
        position = request.POST.get("position", 0)
        
        dashboard_db_conn = DB(
            dashboard.DASHBOARD_DB_HOST,
            dashboard.DASHBOARD_DB_PORT,
            dashboard.DASHBOARD_DB_USER,
            dashboard.DASHBOARD_DB_PASSWD,
            dashboard.DASHBOARD_DB_NAME)
        
        #screen
        sql_screen = '''insert into dashboard_screen (pid, name, product_name) values(\'%s\', \'%s\', \'%s\')'''%(pid, screen_name, product_name)
        cursor = dashboard_db_conn.execute(sql_screen)
        screen_id = cursor.lastrowid
        dashboard_db_conn.commit()
        cursor.close()
        
        #graph
        sql_graph = '''insert into dashboard_graph (title, hosts, counters, screen_id,
                timespan, graph_type, method, position)
                values(\'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\')'''%\
                (title, dashboard.ENDPOINT_DELIMITER.join(hosts) or "", dashboard.ENDPOINT_DELIMITER.join(counters) or "", screen_id,\
                timespan, graph_type, method, position)

        cursor = dashboard_db_conn.execute(sql_graph)
        id_ = cursor.lastrowid
        dashboard_db_conn.execute('''update dashboard_graph set position=%s where id=%s''', (id_, id_))
        dashboard_db_conn.commit()
        cursor and cursor.close()
        
        sdict['ret'] = 1
        sdict['msg'] = u'创建屏幕成功 :)'
    except Exception,e:
        sdict['ret'] = 0
        sdict['msg'] = u'创建屏幕失败 :('
        print e
        
    template_file = "monitor_query/step.html"
    html = render_to_string(template_file, locals())
    sdict['html'] = html
    return HttpResponse(json.dumps(sdict, cls=LazyEncoder))

#def dash_screen(sid):
#    start = request.args.get("start")
#    end = request.args.get("end")
#
#    top_screens = DashboardScreen.gets(pid=0)
#    top_screens = sorted(top_screens, key=lambda x:x.name)
#
#    screen = DashboardScreen.get(sid)
#    if not screen:
#        abort(404, "no screen")
#
#    if str(screen.pid) == '0':
#        sub_screens = DashboardScreen.gets(pid=sid)
#        sub_screens = sorted(sub_screens, key=lambda x:x.name)
#        return render_template("screen/top_screen.html", **locals())
#
#    pscreen = DashboardScreen.get(screen.pid)
#    sub_screens = DashboardScreen.gets(pid=screen.pid)
#    sub_screens = sorted(sub_screens, key=lambda x:x.name)
#    graphs = DashboardGraph.gets_by_screen_id(screen.id)
#
#    all_graphs = []
#
#    for graph in graphs:
#        all_graphs.extend(generate_graph_urls(graph, start, end) or [])
#
#    all_graphs = sorted(all_graphs, key=lambda x:x.position)
#
#    return render_template("screen/screen.html", **locals())


@login_required
@csrf_exempt
@render_to('monitor_query/screen_show.html')
def screen_show_index(request):
    return locals()

from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^monitor_query/screen_setting/$', screen_setting_index, name='screen_setting_index'),
    url(r'^monitor_query/screen_list/$', screen_setting_list, name='screen_setting_list'),
    url(r'^monitor_query/screen_add/$', screen_add, name='screen_add'),
    
    
#    url(r'^monitor_query/screen_edit/(\d+)/$', screen_edit, name='screen_edit'),
    
    url(r'^monitor_query/screen_show/$', screen_show_index, name='screen_show_index'),
)