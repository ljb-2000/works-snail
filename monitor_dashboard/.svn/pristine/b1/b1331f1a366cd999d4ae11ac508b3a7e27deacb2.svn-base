#!/usr/bin/env python
# -*- coding:utf-8 -*-

import datetime
import os, errno
import logging
import traceback, json
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import HttpResponse
from redisclient import rc
from releaseinfo import UNSOLVED_ALARM_EVENTS_KEY, AGENT_INFO_KEY_PREFIX
import time
from utils.db_conn import DB
from config import portal, monitor, graph
from utils.common import MSSQL, get_product_list_by_user, get_hosts_of_user, get_last_datas
from releaseinfo import SPECIAL_USERS, SPECIAL_USER_NAME

#logger = logging.getLogger("logger_utils")

@csrf_exempt
def ajax_get_group_hosts(request):
    """
        get group host names
    """
    cnname = request.user.first_name
    if request.user.username in SPECIAL_USERS:
        cnname = SPECIAL_USER_NAME
    products = get_product_list_by_user(cnname)
    
    grp_str = request.GET.get('grp_str','')
    select_id_str = request.GET.get('selected_id','')
    select_ids = []
    if select_id_str:
        select_ids = select_id_str.split(',')
    
    result = []
    portal_db_conn = DB(
        portal.DB_HOST,
        portal.DB_PORT,
        portal.DB_USER,
        portal.DB_PASS,
        portal.DB_NAME)
    
    #模糊查询
    if grp_str:
        sql1 = u"select id, grp_name from grp where grp_name like \'%%%s%%\' order by id"%grp_str
        sql2 = u"select id, grp_name from grp where grp_name not like \'%%%s%%\' order by id"%grp_str
        rows1 = portal_db_conn.query_all(sql1)
        rows2 = portal_db_conn.query_all(sql2)
        rows = rows1 + rows2

        product_list1 = []
        product_list2 = []
        product_dict = {}
        
        for grp_info_dict in rows:
            grp_name = grp_info_dict.get('grp_name')
            grp_id = grp_info_dict.get('id')
            product_name = grp_name.split('.')[0]
            product_set = grp_name.split('.')[1]
            
            #权限判断
            if product_name in products:
                if grp_info_dict in rows1:
                    if product_name not in product_list1:
                        product_list1.append(product_name)
                else:
                    if product_name not in product_list2:
                        product_list2.append(product_name)
                if product_name not in product_dict.keys():
                    product_dict[product_name] = [{'product_set':product_set, 'grp_id':grp_id}]
                else:
                    product_dict[product_name].append({'product_set':product_set, 'grp_id':grp_id})
        
        product_list1.sort()
        product_list2.sort()
        product_list = product_list1 + product_list2
        for product in product_list:
            product_set_list = product_dict.get(product,[])
            children_list = []
            for product_set_dict in product_set_list:
                product_set = product_set_dict.get('product_set')
                grp_id = product_set_dict.get('grp_id')
                if '%s'%grp_id in select_ids:
                    children_list.append({ 'text': product_set, "id": grp_id, "state":{'selected':True}})
                else:
                    children_list.append({ 'text': product_set, "id": grp_id})
                    
            if product in product_list1:
                result.append({"text": product, "id": product, "li_attr":{"data-filter":'true'},
                               "children": children_list,
                               })
            else:
                result.append({"text": product, "id": product,
                               "children": children_list,
                               })
        
    else:
        sql = u'''select id, grp_name from grp order by id'''
        rows = portal_db_conn.query_all(sql)
    
        product_list = []
        product_dict = {}
        for grp_info_dict in rows:
            grp_name = grp_info_dict.get('grp_name')
            grp_id = grp_info_dict.get('id')
            if len(grp_name.split(".")) != 2:
                print u"========> 名称不规范: ",grp_info_dict
                continue
            product_name = grp_name.split('.')[0]
            product_set = grp_name.split('.')[1]
            
            #权限判断
            if product_name in products:
                if product_name not in product_list:
                    product_list.append(product_name)
                if product_name not in product_dict.keys():
                    product_dict[product_name] = [{'product_set':product_set, 'grp_id':grp_id}]
                else:
                    product_dict[product_name].append({'product_set':product_set, 'grp_id':grp_id})
                
        product_list.sort()
        for product in product_list:
            product_set_list = product_dict.get(product,[])
            children_list = []
            for product_set_dict in product_set_list:
                product_set = product_set_dict.get('product_set')
                grp_id = product_set_dict.get('grp_id')
                if '%s'%grp_id in select_ids:
                    children_list.append({ 'text': product_set, "id": grp_id, "state":{'selected':True}})
                else:
                    children_list.append({ 'text': product_set, "id": grp_id, })
            result.append({"text": product, "id": product,
                           "children": children_list,
                           })
        
    return HttpResponse(json.dumps(result), content_type="application/json")

@csrf_exempt
def ajax_get_ip_by_tree(request):
    """
        get ips by tree
    """
    node_id_list = request.POST.getlist('nodeIdLists[]',[])
    node_id_str = ','.join(node_id_list)
    sql = '''
        select distinct(`host`.ip) from host, grp_host
        where host.id = grp_host.host_id and grp_host.grp_id in (%s)
         '''%(node_id_str)
    
    portal_db_conn = DB(
        portal.DB_HOST,
        portal.DB_PORT,
        portal.DB_USER,
        portal.DB_PASS,
        portal.DB_NAME)
    rows = portal_db_conn.query_all(sql)
        
    ip_list = []
    for ip_dict in rows:
        ip = ip_dict.get('ip')
        ip_list.append(ip)
    return HttpResponse(json.dumps(ip_list), content_type="application/json")

def get_unsolved_alarms():
    """
        get unsolved alarm events from redis.
    """
    alarm_str = rc.get(UNSOLVED_ALARM_EVENTS_KEY)
    alarm_list = []
    if alarm_str:
        alarms = json.loads(alarm_str)
        for level,level_items in alarms.iteritems():
            for event_id,event_value in level_items.iteritems():
                timestamp = event_value.get('timestamp')
                event_value.update({'alarm_time':time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(timestamp) if timestamp and isinstance(timestamp,int) else "")})
                alarm_list.append(event_value)
    return alarm_list

def get_product_of_host(host):
    if not host:
        return ""
    key = AGENT_INFO_KEY_PREFIX + host
    p_name = rc.hget(key, 'p_name')
    p_set = rc.hget(key, 'p_set')
    p_module = rc.hget(key, 'p_module')
    if p_name or p_set or p_module:
        p_name = p_name.decode("utf-8") if p_name else p_name
        p_set = p_set.decode("utf-8") if p_set else p_set
        p_module = p_module.decode("utf-8") if p_module else p_module
    else:
        sql = '''select * from alarm_agentinfo WHERE endpoint="%(host)s" limit 1''' % ({"host": host})
        monitor_db_conn = DB(
            monitor.DB_HOST,
            monitor.DB_PORT,
            monitor.DB_USER,
            monitor.DB_PASS,
            monitor.DB_NAME)
        result = monitor_db_conn.query_one(sql)
        if result:
            p_name = result.get("product_name","")
            p_set = result.get("p_set","")
            p_module = result.get("p_module","")
            rc.hset(key, "p_name", p_name)
            rc.hset(key, "p_set", p_set)
            rc.hset(key, "p_module", p_module)
            rc.expire(key, 5 * 60)
    info = {
        "p_name":p_name,
        "p_set":p_set,
        "p_module":p_module
    }
    return info

@csrf_exempt
def ajax_filter_ip(request):
    """
        get ips by filter
    """
    ip_list = []
    ip_text = request.POST.get('ip_text','')
    if ip_text:
        sql = '''select ip from host where ip like \'%%%s%%\''''%ip_text
        
        portal_db_conn = DB(
            portal.DB_HOST,
            portal.DB_PORT,
            portal.DB_USER,
            portal.DB_PASS,
            portal.DB_NAME)
        rows = portal_db_conn.query_all(sql)
            
        for ip_dict in rows:
            ip = ip_dict.get('ip')
            ip_list.append(ip)
    return HttpResponse(json.dumps(ip_list), content_type="application/json")

@csrf_exempt
def ajax_filter_metric(request):
    """
        get metrics by filter
    """
    metric_list = []
    metric_text = request.POST.get('metric_text','')
    if metric_text:
        sql = '''select DISTINCT metric from strategy where metric like \'%%%s%%\''''%metric_text
        
        portal_db_conn = DB(
            portal.DB_HOST,
            portal.DB_PORT,
            portal.DB_USER,
            portal.DB_PASS,
            portal.DB_NAME)
        rows = portal_db_conn.query_all(sql)
            
        for ip_dict in rows:
            metric = ip_dict.get('metric')
            metric_list.append(metric)
    return HttpResponse(json.dumps(metric_list), content_type="application/json")

@csrf_exempt
def ajax_filter_counter(request):
    """
        get counters by filter
    """
    counter_list = []
    counter_text = request.POST.get('counter_text','')
    if counter_text:
        graph_db_conn = DB(
            graph.GRAPH_DB_HOST,
            graph.GRAPH_DB_PORT,
            graph.GRAPH_DB_USER,
            graph.GRAPH_DB_PASSWD,
            graph.GRAPH_DB_NAME)
        
        sql = '''select DISTINCT counter from endpoint_counter where counter like \'%%%s%%\''''%counter_text
        rows = graph_db_conn.query_all(sql)
            
        for ip_dict in rows:
            counter = ip_dict.get('counter')
            counter_list.append(counter)
    return HttpResponse(json.dumps(counter_list), content_type="application/json")

@csrf_exempt
def ajax_get_cpu_top10(request):
    user = request.user
    name = user.first_name
    if user.username in SPECIAL_USERS:
        name = SPECIAL_USER_NAME
    endpoints = get_hosts_of_user(name)

    #cpu top10
    cpu_list = []
    ret_list = get_last_datas(endpoints,'cpu.idle')
    for ret in ret_list:
        endpoint = ret.get('endpoint')
        value_dict = ret.get('value')
        if value_dict.get('timestamp'):
            cpu_list.append((100 - value_dict.get('value'), endpoint))
    cpu_list.sort(reverse=True)
    cpu_list = cpu_list[:10]
    return HttpResponse(json.dumps(cpu_list), content_type="application/json")

@csrf_exempt
def ajax_get_mem_top10(request):
    user = request.user
    name = user.first_name
    if user.username in SPECIAL_USERS:
        name = SPECIAL_USER_NAME
    endpoints = get_hosts_of_user(name)
    
    #mem top10
    mem_list = []
    ret_list = get_last_datas(endpoints,'mem.memfree.percent')
    for ret in ret_list:
        endpoint = ret.get('endpoint')
        value_dict = ret.get('value')
        if value_dict.get('timestamp'):
            mem_list.append((100 - value_dict.get('value'), endpoint))
    mem_list.sort(reverse=True)
    mem_list = mem_list[:10]
    return HttpResponse(json.dumps(mem_list), content_type="application/json")

@csrf_exempt
def ajax_get_disk_top10(request):
    user = request.user
    name = user.first_name
    if user.username in SPECIAL_USERS:
        name = SPECIAL_USER_NAME
    endpoints = get_hosts_of_user(name)
    
    #disk top10
    disk_list = []
    ret_list = get_last_datas(endpoints,'df.statistics.used.percent')
    for ret in ret_list:
        endpoint = ret.get('endpoint')
        value_dict = ret.get('value')
        if value_dict.get('timestamp'):
            disk_list.append((value_dict.get('value'), endpoint))
    disk_list.sort(reverse=True)
    disk_list = disk_list[:10]
    return HttpResponse(json.dumps(disk_list), content_type="application/json")

@csrf_exempt
def ajax_get_net_info(request):
    """
        get net info
    """
    
    src_ip = request.POST.get('src_ip')
    region = request.POST.get('region')
    
    ms = MSSQL(host=mssql.host, user=mssql.user, pwd=mssql.pwd)

    sql = '''
    SELECT C.NAME,TB.SRC_IP,TB.DST_IP,TB.MAX_TTL,TB.AVG_TTL,TB.MIN_TTL,TB.LOSE,TB.CREATE_TIME,TB.TYPE_NAME,TB.REGION,TB.PROVINCE,TB.CITY
    FROM IM_MONITOR_IDC_IP AS P
    LEFT JOIN IDC AS C on C.IDC_ID=P.IDC_ID
    LEFT JOIN (
    SELECT T.SRC_IP,T.DST_IP,T.MAX_TTL,T.AVG_TTL,T.MIN_TTL,T.LOSE,T.CREATE_TIME,P.TYPE_NAME,C.REGION,C.PROVINCE,C.CITY
    FROM IM_MONITOR_TTL AS T
    LEFT JOIN IM_MONITOR_CDN_IP AS D ON D.IP=T.DST_IP
    LEFT JOIN IDC_TYPE AS P ON P.TYPE_ID=D.TYPE_ID
    LEFT JOIN CITY AS C ON C.CITY_ID=D.CITY_ID
    WHERE C.CITY IS NOT NULL
    AND T.CREATE_TIME>DATEADD(MI,-5,GETDATE())
    ) AS TB ON TB.SRC_IP=P.IP
    WHERE TB.SRC_IP = %s  AND TB.REGION = %s
    '''%(src_ip, region)
 
    ret = ms.ExecQuery(sql)
 
    data_list = []
    for row in ret:
        avg_ttl = row[4]
        lost = row[6]
        province = row[9]
        city = row[9]
        
        data_list.append({
                        'province':province,
                        'city':city,
                        'ttl':avg_ttl,
                        'lost':lost,
                        }
                        )
 
    return HttpResponse(json.dumps(data_list), content_type="application/json")


from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^ajax_get_group_hosts/$', ajax_get_group_hosts, name='ajax_get_group_hosts'),
    url(r'^ajax_get_ip_by_tree/$', ajax_get_ip_by_tree, name='ajax_get_ip_by_tree'),
    url(r'^ajax_filter_ip/$', ajax_filter_ip, name='ajax_filter_ip'),
    url(r'^ajax_filter_metric/$', ajax_filter_metric, name='ajax_filter_metric'),
    url(r'^ajax_filter_counter/$', ajax_filter_counter, name='ajax_filter_counter'),
    
    url(r'^ajax_get_cpu_top10/$', ajax_get_cpu_top10, name='ajax_get_cpu_top10'),
    url(r'^ajax_get_mem_top10/$', ajax_get_mem_top10, name='ajax_get_mem_top10'),
    url(r'^ajax_get_disk_top10/$', ajax_get_disk_top10, name='ajax_get_disk_top10'),
    
    url(r'^ajax_get_net_info/$', ajax_get_net_info, name='ajax_get_net_info'),
)
