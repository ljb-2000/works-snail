# -- encoding=utf-8 --
import os, sys
sys.path.insert(0, os.path.abspath(os.curdir))

import settings

from utils.decorator import render_to, login_required
from django.shortcuts import render_to_response
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import logging
import traceback
import json
import datetime
from service import _input
from releaseinfo import REL_MEDIA_URL

logger = logging.getLogger("logger")

@login_required
@csrf_exempt
@render_to('input/upload.html')
def upload_index(request):
    return locals()

@csrf_exempt
def file_list(request):
    file_list = []
    
    fileuploads = _input.get_fileUploads_by_params().order_by('-id')
    for file in fileuploads:
        name = file.file_name
        user = file.user.username
        time = datetime.datetime.strftime(file.upload_time,'%Y-%m-%d %H:%M')
        download = u'%s%s/%s/%s/'%(REL_MEDIA_URL, user, datetime.datetime.strftime(file.upload_time,'%Y%m%d%H%M%S'), name)
        file_list.append({'name':name, 'user': user, 'time': time, 'download':download})
        
    return HttpResponse(json.dumps(file_list), content_type="application/json")

@csrf_exempt
def file_upload(request):
    user = request.user
    sdicts = {'result':0}
    sfile = request.FILES.get("upload_file",None)
    if sfile:
        file_name = u'%s'%sfile.name
        try:
            now = datetime.datetime.now()
            file_path=os.path.join(settings.MEDIA_ROOT, user.username)
            if not os.path.exists(file_path):
                os.mkdir(file_path)
            file_path=os.path.join(file_path, datetime.datetime.strftime(now,'%Y%m%d%H%M%S'))
            if not os.path.exists(file_path):
                os.mkdir(file_path)
            file_path=os.path.join(file_path, file_name)
            
            fp = open(file_path, 'wb')
            for content in sfile.chunks(): 
                fp.write(content)
            fp.close()
            sdicts["result"] = 1
            _input.create_fileUpload_by_params(user=user, file_name=file_name, upload_time=now)
        except Exception,e:
            print e
    return HttpResponse(json.dumps(sdicts), content_type="application/json")

@login_required
@csrf_exempt
@render_to('input/issue.html')
def issue_index(request):
    return locals()

from django.conf.urls import patterns, url
urlpatterns = patterns('',
    url(r'^input/upload/$', upload_index, name='upload_index'),
    url(r'^input/file_list/$', file_list, name='file_list'),
    url(r'^input/file_upload/$', file_upload, name='file_upload'),

    url(r'^input/issue/$', issue_index, name='issue_index'),
)